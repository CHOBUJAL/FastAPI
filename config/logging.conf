# 포맷터 정의 ######################################
[formatters]
keys=default

[formatter_default]
class=colorlog.ColoredFormatter
format=%(log_color)s%(asctime)s[%(levelname)s]%(filename)s(%(lineno)d)%(reset)s %(message)s
datefmt=%Y-%m-%dT%H:%M:%S
###################################################

# 핸들러 정의 ######################################
[handlers]
keys=streamHandler, rootTimedRotatingFileHandler, testTimedRotatingFileHandler

[handler_streamHandler]
class=StreamHandler
level=NOTSET
formatter=default
args=(sys.stdout, )

# FileHandler -> TimeRotatingFileHandler 상속 개념
# 동일한 File Handler이기 때문에 같이 사용하는 경우 파일에 중복으로 로그를 쌓는다.
# 그렇기 때문에 하나의 핸들러만 사용해야 한다.
[handler_rootTimedRotatingFileHandler]
# 멀티 프로세스 환경에서 동일한 파일에 write를 진행할 때, 충돌을 방지하여 파일의 일관성을 유지하기위한 라이브러리
class=common.mpfhandler.MultProcTimedRotatingFileHandler
level=NOTSET
formatter=default
# 매일 정각에 백업을 하도록 세팅
args=('./logs/status.log', 'midnight')

[handler_testTimedRotatingFileHandler]
class=common.mpfhandler.MultProcTimedRotatingFileHandler
level=NOTSET
formatter=default
# 매일 정각에 백업을 하도록 세팅
args=('./logs/status.log', 'midnight')
###################################################

# 로거 정의 #######################################
[loggers]
keys=root, test

[logger_root]
level=INFO
handlers=streamHandler, rootTimedRotatingFileHandler
qualname=root
propagate=0

[logger_test]
level=INFO
handlers=streamHandler, testTimedRotatingFileHandler
qualname=test
propagate=0
###################################################
